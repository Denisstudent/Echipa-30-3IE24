#include <iostream>
#include <vector>
#include <string>

using namespace std;

struct Student {
    string nume;
    int varsta;
    double medie;
};

class StudentManager {
private:
    vector<Student> studenti;

public:
    void adaugaStudent(const string& nume, int varsta, double medie) {
        Student student = {nume, varsta, medie};
        studenti.push_back(student);
        cout << "Studentul " << nume << " a fost adaugat cu succes!\n";
    }

    void afiseazaStudenti() {
        if (studenti.empty()) {
            cout << "Lista de studenti este goala.\n";
            return;
        }
        cout << "Lista de studenti:\n";
        for (size_t i = 0; i < studenti.size(); ++i) {
            cout << i + 1 << ". " << studenti[i].nume 
                 << " | Varsta: " << studenti[i].varsta 
                 << " | Medie: " << studenti[i].medie << '\n';
        }
    }

    void stergeStudent(int index) {
        if (index < 1 || index > studenti.size()) {
            cout << "Index invalid!\n";
            return;
        }
        cout << "Studentul " << studenti[index - 1].nume << " a fost sters.\n";
        studenti.erase(studenti.begin() + (index - 1));
    }
};

int main() {
    StudentManager manager;
    int optiune;

    do {
        cout << "\n=== Meniu Gestionare Studenti ===\n";
        cout << "1. Adauga student\n";
        cout << "2. Afiseaza studenti\n";
        cout << "3. Sterge student\n";
        cout << "4. Iesire\n";
        cout << "Alege o optiune: ";
        cin >> optiune;

        switch (optiune) {
        case 1: {
            string nume;
            int varsta;
            double medie;
            cout << "Introduceti numele studentului: ";
            cin.ignore();
            getline(cin, nume);
            cout << "Introduceti varsta studentului: ";
            cin >> varsta;
            cout << "Introduceti media studentului: ";
            cin >> medie;
            manager.adaugaStudent(nume, varsta, medie);
            break;
        }
        case 2:
            manager.afiseazaStudenti();
            break;
        case 3: {
            int index;
            cout << "Introduceti indexul studentului de sters: ";
            cin >> index;
            manager.stergeStudent(index);
            break;
        }
        case 4:
            cout << "La revedere!\n";
            break;
        default:
            cout << "Optiune invalida. Incercati din nou.\n";
        }
    } while (optiune != 4);

    return 0;
}
